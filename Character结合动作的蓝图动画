首先要明确达成的效果，即人物模型随着操作的不同，造成不同的速度，从而在世界中呈现出走路跑步跳跃或者静止不动的效果
这就是蓝图动画，在c++中设置好参数之后，大多数由蓝图完成

首先可以先右键-》Animation创建blendspace蓝图
左栏资产详情中，可以设定时间轴的名称和最大数值，这里设置的是速度
由于之前已经从商城中导入了动作                网站现在已知mixamo？
从资产文件夹拖进去就行
至此blendspace蓝图设置完毕

另左栏骨骼树应该可以改变人物模型的动作什么的，还没有尝试

由于是c++编程，所以真正的动作逻辑是在c++基础上创建蓝图
首先创建Animinstance的c++文件

设置：
  virtual void NativeInitializeAnimation() override;
相当于character的beginplay函数

	UFUNCTION(BlueprintCallable, Category = AnimationProperties)
	void UpdateAnimationProperties();


	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Movement)
	float MovementSpeed; 

	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Movement)
	bool bIsInAir;

	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Movement)
	class APawn* Pawn;

cpp中：
void UMainAnimInstance::NativeInitializeAnimation() {
	if (Pawn == nullptr)
	{
		Pawn = TryGetPawnOwner();
获取拥有动画的pawn
	}

}

void UMainAnimInstance::UpdateAnimationProperties() {
类似于tick的方法，更新在动画中不断变化的各个属性
	if (Pawn == nullptr)
	{
		Pawn = TryGetPawnOwner();
	}

	if (Pawn)
	{
		FVector Speed = Pawn->GetVelocity();
		FVector LateralSpeed = FVector(Speed.X, Speed.Y, 0.f);
只是导入水平方向的速度，使用fvector的构造函数
		MovementSpeed = LateralSpeed.Size();
size方法获取具体数值，而不是向量

		bIsInAir = Pawn->GetMovementComponent()->IsFalling();
检测是否在空中
	}
}

再进入引擎调整蓝图
首先创建一个动画蓝图  右键啥啥啥的不多说的
创建时选项就选animinstance和对应骨骼就可以了

创建后，reparent blueprint选择c++文件作为父类

感觉蓝图操作不好写，还是回蓝图多看看吧。。。。


